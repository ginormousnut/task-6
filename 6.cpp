#include <iostream>
#include <stdlib.h>
#include <clocale>
using namespace std;

int main()
{
    setlocale(LC_ALL, "");
    int q = 1;
    while (q == 1)
    {
        cout << "Введите 1 для запуска, 0 для завершения программы>";
        cin >> q;
        switch (q)
        {
        case(0):
        {
            cout << "Программа завершена";
            break;
        }
        case(1):
        {
            srand(time(NULL)); //помогает элементам массива быть случайными
            int n, m, i, j, min, max, jmin, jmax, flag, k;
            cout << "Введем количество строк матрицы";
            cin >> n;
            cout << "Введем количество столбцов матрицы";
            cin >> m;
            cout << endl;
            int** a = new int* [n]; //объявление массива, в каждый элемент строки вводим столбец
            for (i = 0; i < n; i++) //заполнение массива
                a[i] = new int[m];
            for (i = 0; i < n; i++)
                for (j = 0; j < m; j++) //вложенный цикл используем для двумерного массива
                    a[i][j] = rand() % 20 + 1; //задаются случайные числа от 1 до 20
            for (i = 0; i < n; i++)
            {
                for (j = 0; j < m; j++)
                {
                    cout.width(3); //для лучшего вида матрицы
                    cout << a[i][j];
                }
                cout << endl;
            }
            cout << endl;
            for (i = 0; i < n; i++) //проверяем элементы строки на седловые точки
            {
                min = a[i][0]; //присваваем начальный элемент матрицы
                max = a[i][0]; //присваиваем начальный элемент матрицы
                jmin = 0; //индекс минимума
                for (j = 0; j < m; j++) 
                {
                    if (a[i][j] < min) //если элемент матрицы меньше элемента min
                    {
                        min = a[i][j];//то минимуму присваивается этот элемент
                        //jmin = j;
                    }
                    if (a[i][j] > max)//аналогично максимум
                        max = a[i][j];
                }
                //cout << "min " << min << " " << endl;
                for (j = 0; j < m; j++)
                {
                    if (a[i][j] == min) //если элемент массива равен минимуму, то мы выбираем седловую точку, которая является наименьшей в своей строке и наибольшей в своем столбце
                    {
                        jmin = j;//номер(индекс) седловой точки, которая мин в строке и макс в столбце
                        flag = 0; //индикатор наличия данной седловой точки
                        for (k = 0; k < n; k++) //цикл проверки на седловую точку
                            if (a[k][jmin] > a[i][jmin]) //если элемент матрицы является минимумом в столбце(или он вовсе не подходит под определение седловой точки)
                            {
                                flag = 1; //то мы обозначаем ее за 1, и, следовательно, не выводим в ответ(а начинаем проверять следующий элемент или останавливаемся при отсутствии седл точек)
                            }
                        if (flag == 0) //если же флаг=0, т.е. данный элемент матрицы в столбце максимальный, то мы выводим индекс
                        {
                            cout << i + 1 << ", " << jmin + 1 << endl; //вывели индекс седловой точки, которая минимум в строке и максимум в столбце, прибавили единицу для удобства пользователя(т.к. изначально номера строк и стоблцов начинаются с нуля, а нам это неудобно)
                        }
                    }
                }

                //cout << "max " << max << " " << endl;
                for (j = 0; j < m; j++) //то же самое, но для седловой точки(элемента матрицы), которая максимум в строке, но минимум в стоблце
                {
                    if (a[i][j] == max)
                    {
                        jmax = j;
                        flag = 0;
                        for (k = 0; k < n; k++)
                            if (a[k][jmax] < a[i][jmax])
                            {
                                flag = 1;
                            }
                        if (flag == 0)
                        {
                            cout << i + 1 << ", " << jmax + 1 << endl;
                        }
                    }
                }
            }
        }
        default:
        {
            cout << endl;
            q = 1;
            continue;
        }
       }
    }
}